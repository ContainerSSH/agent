// This file should only be run from the go generate utility, never directly.
// +build ignore

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"regexp"
	"strings"
)

func must(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func escape(text string) string {
	result := ""
	for _, r := range text {
		if r == '"' {
			result += "\\\""
		} else if r == '\\' {
			result += "\\\\"
		} else {
			result += string(r)
		}
	}
	return result
}

var coreRe = regexp.MustCompile("`([^`]+)`")
var bold = "\\033[1m"
var dim = "\\033[2m"
var underlined = "\\033[4m"
var blink = "\\033[5m"
var inverted = "\\033[7m"
var hidden = "\\033[8m"

var reset = "\\033[0m"
var resetBold = "\\033[21m"
var resetDim = "\\033[22m"
var resetUnderlined = "\\033[24m"
var resetBlink = "\\033[25m"
var resetReverse = "\\033[27m"
var resetHidden = "\\033[28m"

var defaultColor = "\\033[39m"
var black = "\\033[30m"
var red = "\\033[31m"
var green = "\\033[32m"
var yellow = "\\033[33m"
var blue = "\\033[34m"
var magenta = "\\033[35m"
var cyan = "\\033[36m"
var lightGray = "\\033[37m"
var darkGray = "\\033[90m"
var lightRed = "\\033[91m"
var lightGreen = "\\033[92m"
var lightYellow = "\\033[93m"
var lightBlue = "\\033[94m"
var lightMagenta = "\\033[95m"
var lightCyan = "\\033[96m"
var white = "\\033[97m"

func color(text string) string {
	if strings.HasPrefix(text, "#") {
		text = fmt.Sprintf("%s%s%s%s",
			bold, white,
			text,
			reset)
	}

	if strings.HasPrefix(text, "    ") {
		text = fmt.Sprintf("%s%s%s",
			white,
			text,
			reset)
	}

	if strings.HasPrefix(text, ": ") {
		text = "    " + strings.TrimPrefix(text, ": ")
	}

	text = coreRe.ReplaceAllStringFunc(text, func(s string) string {
		text = strings.TrimSuffix(strings.TrimPrefix(s, "`"), "`")
		text = fmt.Sprintf(
			"%s%s%s",
			white,
			text,
			reset,
		)
		return text
	})

	if strings.HasPrefix(text, "---") {
		text = ""
		for i := 0; i < 76; i++ {
			text += "-"
		}
	}

	return text
}

func plain(text string) string {
	if strings.HasPrefix(text, ": ") {
		text = "    " + strings.TrimPrefix(text, ": ")
	}

	text = coreRe.ReplaceAllStringFunc(text, func(s string) string {
		text = strings.TrimSuffix(strings.TrimPrefix(s, "`"), "`")
		text = fmt.Sprintf(
			" %s ",
			text,
		)
		return text
	})

	if strings.HasPrefix(text, "---") {
		text = ""
		for i := 0; i < 76; i++ {
			text += "-"
		}
	}

	return text
}

func main() {
	fh, err := os.Open("USAGE.md")
	must(err)
	data, err := ioutil.ReadAll(fh)
	must(err)
	must(fh.Close())

	out, err := os.Create("usage.go~")
	must(err)
	_, err = out.Write([]byte("// ⚠⚠⚠ Code generated by go generate; DO NOT EDIT ⚠⚠⚠\n"))
	must(err)
	_, err = out.Write([]byte("package main\n\nconst (\n"))
	must(err)

	lines := strings.Split(
		strings.ReplaceAll(string(data), "\r", ""),
		"\n")

	// region Plain
	_, err = out.Write([]byte("\tusageText = "))
	must(err)

	i := 0
	for _, line := range lines {
		if i > 0 {
			_, err = out.Write([]byte(" + \n\t\t"))
		}
		i++
		_, err = out.Write([]byte(fmt.Sprintf("\"%s\\n\"", plain(escape(line)))))
		must(err)
	}
	_, err = out.Write([]byte("\n"))
	// endregion

	// region Colored
	_, err = out.Write([]byte("\tusageTextColored = "))
	must(err)

	i = 0
	for _, line := range lines {
		if i > 0 {
			_, err = out.Write([]byte(" + \n\t\t"))
		}
		i++
		_, err = out.Write([]byte(fmt.Sprintf("\"%s\\n\"", color(escape(line)))))
		must(err)
	}
	_, err = out.Write([]byte("\n"))
	// endregion

	_, err = out.Write([]byte("\n)\n"))
	must(err)
	must(out.Close())
	must(os.Rename("usage.go~", "usage.go"))
}
